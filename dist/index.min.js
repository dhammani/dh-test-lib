/**
   * @license
   * author: Dris Hammani
   * ternoa-connect-react.js v0.1.0
   * Released under the MIT license.
   */
this["ternoa-connect-react"]=function(){"use strict";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var t={};function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var n,o={};function a(){if(n)return o;n=1;var e=Symbol.for("react.element"),t=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),u=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),c=Symbol.for("react.provider"),s=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),y=Symbol.iterator;var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,v={};function b(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||m}function g(){}function _(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||m}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!==r(e)&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var w=_.prototype=new g;w.constructor=_,h(w,b.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,C={current:null},R={key:!0,ref:!0,__self:!0,__source:!0};function O(t,r,n){var o,a={},u=null,i=null;if(null!=r)for(o in void 0!==r.ref&&(i=r.ref),void 0!==r.key&&(u=""+r.key),r)k.call(r,o)&&!R.hasOwnProperty(o)&&(a[o]=r[o]);var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){for(var s=Array(c),l=0;l<c;l++)s[l]=arguments[l+2];a.children=s}if(t&&t.defaultProps)for(o in c=t.defaultProps)void 0===a[o]&&(a[o]=c[o]);return{$$typeof:e,type:t,key:u,ref:i,props:a,_owner:C.current}}function E(t){return"object"===r(t)&&null!==t&&t.$$typeof===e}var j=/\/+/g;function P(e,t){return"object"===r(e)&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function $(n,o,a,u,i){var c=r(n);"undefined"!==c&&"boolean"!==c||(n=null);var s=!1;if(null===n)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(n.$$typeof){case e:case t:s=!0}}if(s)return i=i(s=n),n=""===u?"."+P(s,0):u,S(i)?(a="",null!=n&&(a=n.replace(j,"$&/")+"/"),$(i,o,a,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(t,r){return{$$typeof:e,type:t.type,key:r,ref:t.ref,props:t.props,_owner:t._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(j,"$&/")+"/")+n)),o.push(i)),1;if(s=0,u=""===u?".":u+":",S(n))for(var l=0;l<n.length;l++){var f=u+P(c=n[l],l);s+=$(c,o,a,f,i)}else if(f=function(e){return null===e||"object"!==r(e)?null:"function"==typeof(e=y&&e[y]||e["@@iterator"])?e:null}(n),"function"==typeof f)for(n=f.call(n),l=0;!(c=n.next()).done;)s+=$(c=c.value,o,a,f=u+P(c,l++),i);else if("object"===c)throw o=String(n),Error("Objects are not valid as a React child (found: "+("[object Object]"===o?"object with keys {"+Object.keys(n).join(", ")+"}":o)+"). If you meant to render a collection of children, use an array instead.");return s}function T(e,t,r){if(null==e)return e;var n=[],o=0;return $(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function x(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},I={transition:null},L={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:I,ReactCurrentOwner:C};return o.Children={map:T,forEach:function(e,t,r){T(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},o.Component=b,o.Fragment=a,o.Profiler=i,o.PureComponent=_,o.StrictMode=u,o.Suspense=f,o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,o.cloneElement=function(t,r,n){if(null==t)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var o=h({},t.props),a=t.key,u=t.ref,i=t._owner;if(null!=r){if(void 0!==r.ref&&(u=r.ref,i=C.current),void 0!==r.key&&(a=""+r.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(s in r)k.call(r,s)&&!R.hasOwnProperty(s)&&(o[s]=void 0===r[s]&&void 0!==c?c[s]:r[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}return{$$typeof:e,type:t.type,key:a,ref:u,props:o,_owner:i}},o.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},o.createElement=O,o.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},o.createRef=function(){return{current:null}},o.forwardRef=function(e){return{$$typeof:l,render:e}},o.isValidElement=E,o.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:x}},o.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},o.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},o.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},o.useCallback=function(e,t){return D.current.useCallback(e,t)},o.useContext=function(e){return D.current.useContext(e)},o.useDebugValue=function(){},o.useDeferredValue=function(e){return D.current.useDeferredValue(e)},o.useEffect=function(e,t){return D.current.useEffect(e,t)},o.useId=function(){return D.current.useId()},o.useImperativeHandle=function(e,t,r){return D.current.useImperativeHandle(e,t,r)},o.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},o.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},o.useMemo=function(e,t){return D.current.useMemo(e,t)},o.useReducer=function(e,t,r){return D.current.useReducer(e,t,r)},o.useRef=function(e){return D.current.useRef(e)},o.useState=function(e){return D.current.useState(e)},o.useSyncExternalStore=function(e,t,r){return D.current.useSyncExternalStore(e,t,r)},o.useTransition=function(){return D.current.useTransition()},o.version="18.2.0",o}var u,i,c={},s={get exports(){return c},set exports(e){c=e}};function l(){return u||(u=1,e=s,t=c,"production"!==process.env.NODE_ENV&&function(){"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var n=Symbol.for("react.element"),o=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),u=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),c=Symbol.for("react.provider"),s=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),d=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),m=Symbol.for("react.offscreen"),h=Symbol.iterator;function v(e){if(null===e||"object"!==r(e))return null;var t=h&&e[h]||e["@@iterator"];return"function"==typeof t?t:null}var b={current:null},g={transition:null},_={current:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1},w={current:null},S={},k=null;function C(e){k=e}S.setExtraStackFrame=function(e){k=e},S.getCurrentStack=null,S.getStackAddendum=function(){var e="";k&&(e+=k);var t=S.getCurrentStack;return t&&(e+=t()||""),e};var R={ReactCurrentDispatcher:b,ReactCurrentBatchConfig:g,ReactCurrentOwner:w};function O(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];j("warn",e,r)}function E(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];j("error",e,r)}function j(e,t,r){var n=R.ReactDebugCurrentFrame.getStackAddendum();""!==n&&(t+="%s",r=r.concat([n]));var o=r.map((function(e){return String(e)}));o.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,o)}R.ReactDebugCurrentFrame=S,R.ReactCurrentActQueue=_;var P={};function $(e,t){var r=e.constructor,n=r&&(r.displayName||r.name)||"ReactClass",o=n+"."+t;P[o]||(E("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,n),P[o]=!0)}var T={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,r){$(e,"forceUpdate")},enqueueReplaceState:function(e,t,r,n){$(e,"replaceState")},enqueueSetState:function(e,t,r,n){$(e,"setState")}},x=Object.assign,D={};function I(e,t,r){this.props=e,this.context=t,this.refs=D,this.updater=r||T}Object.freeze(D),I.prototype.isReactComponent={},I.prototype.setState=function(e,t){if("object"!==r(e)&&"function"!=typeof e&&null!=e)throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},I.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var L={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},N=function(e,t){Object.defineProperty(I.prototype,e,{get:function(){O("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var A in L)L.hasOwnProperty(A)&&N(A,L[A]);function F(){}function M(e,t,r){this.props=e,this.context=t,this.refs=D,this.updater=r||T}F.prototype=I.prototype;var V=M.prototype=new F;V.constructor=M,x(V,I.prototype),V.isPureReactComponent=!0;var U=Array.isArray;function z(e){return U(e)}function q(e){return""+e}function B(e){if(function(e){try{return q(e),!1}catch(e){return!0}}(e))return E("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",function(e){return"function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object"}(e)),q(e)}function Y(e){return e.displayName||"Context"}function H(e){if(null==e)return null;if("number"==typeof e.tag&&E("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case a:return"Fragment";case o:return"Portal";case i:return"Profiler";case u:return"StrictMode";case f:return"Suspense";case p:return"SuspenseList"}if("object"===r(e))switch(e.$$typeof){case s:return Y(e)+".Consumer";case c:return Y(e._context)+".Provider";case l:return function(e,t,r){var n=e.displayName;if(n)return n;var o=t.displayName||t.name||"";return""!==o?r+"("+o+")":r}(e,e.render,"ForwardRef");case d:var t=e.displayName||null;return null!==t?t:H(e.type)||"Memo";case y:var n=e,m=n._payload,h=n._init;try{return H(h(m))}catch(e){return null}}return null}var W,G,K,J=Object.prototype.hasOwnProperty,X={key:!0,ref:!0,__self:!0,__source:!0};function Q(e){if(J.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function Z(e){if(J.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function ee(e,t){var r=function(){W||(W=!0,E("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};r.isReactWarning=!0,Object.defineProperty(e,"key",{get:r,configurable:!0})}function te(e,t){var r=function(){G||(G=!0,E("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};r.isReactWarning=!0,Object.defineProperty(e,"ref",{get:r,configurable:!0})}function re(e){if("string"==typeof e.ref&&w.current&&e.__self&&w.current.stateNode!==e.__self){var t=H(w.current.type);K[t]||(E('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',t,e.ref),K[t]=!0)}}K={};var ne=function(e,t,r,o,a,u,i){var c={$$typeof:n,type:e,key:t,ref:r,props:i,_owner:u,_store:{}};return Object.defineProperty(c._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(c,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(c,"_source",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.freeze&&(Object.freeze(c.props),Object.freeze(c)),c};function oe(e,t,r){var n,o={},a=null,u=null,i=null,c=null;if(null!=t)for(n in Q(t)&&(u=t.ref,re(t)),Z(t)&&(B(t.key),a=""+t.key),i=void 0===t.__self?null:t.__self,c=void 0===t.__source?null:t.__source,t)J.call(t,n)&&!X.hasOwnProperty(n)&&(o[n]=t[n]);var s=arguments.length-2;if(1===s)o.children=r;else if(s>1){for(var l=Array(s),f=0;f<s;f++)l[f]=arguments[f+2];Object.freeze&&Object.freeze(l),o.children=l}if(e&&e.defaultProps){var p=e.defaultProps;for(n in p)void 0===o[n]&&(o[n]=p[n])}if(a||u){var d="function"==typeof e?e.displayName||e.name||"Unknown":e;a&&ee(o,d),u&&te(o,d)}return ne(e,a,u,i,c,w.current,o)}function ae(e,t,r){if(null==e)throw new Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n,o,a=x({},e.props),u=e.key,i=e.ref,c=e._self,s=e._source,l=e._owner;if(null!=t)for(n in Q(t)&&(i=t.ref,l=w.current),Z(t)&&(B(t.key),u=""+t.key),e.type&&e.type.defaultProps&&(o=e.type.defaultProps),t)J.call(t,n)&&!X.hasOwnProperty(n)&&(void 0===t[n]&&void 0!==o?a[n]=o[n]:a[n]=t[n]);var f=arguments.length-2;if(1===f)a.children=r;else if(f>1){for(var p=Array(f),d=0;d<f;d++)p[d]=arguments[d+2];a.children=p}return ne(e.type,u,i,c,s,l,a)}function ue(e){return"object"===r(e)&&null!==e&&e.$$typeof===n}var ie,ce=!1,se=/\/+/g;function le(e){return e.replace(se,"$&/")}function fe(e,t){return"object"===r(e)&&null!==e&&null!=e.key?(B(e.key),n=""+e.key,o={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return o[e]}))):t.toString(36);var n,o}function pe(e,t,a,u,i){var c=r(e);"undefined"!==c&&"boolean"!==c||(e=null);var s,l,f,p=!1;if(null===e)p=!0;else switch(c){case"string":case"number":p=!0;break;case"object":switch(e.$$typeof){case n:case o:p=!0}}if(p){var d=e,y=i(d),m=""===u?"."+fe(d,0):u;if(z(y)){var h="";null!=m&&(h=le(m)+"/"),pe(y,t,h,"",(function(e){return e}))}else null!=y&&(ue(y)&&(!y.key||d&&d.key===y.key||B(y.key),s=y,l=a+(!y.key||d&&d.key===y.key?"":le(""+y.key)+"/")+m,y=ne(s.type,l,s.ref,s._self,s._source,s._owner,s.props)),t.push(y));return 1}var b=0,g=""===u?".":u+":";if(z(e))for(var _=0;_<e.length;_++)b+=pe(f=e[_],t,a,g+fe(f,_),i);else{var w=v(e);if("function"==typeof w){var S=e;w===S.entries&&(ce||O("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),ce=!0);for(var k,C=w.call(S),R=0;!(k=C.next()).done;)b+=pe(f=k.value,t,a,g+fe(f,R++),i)}else if("object"===c){var E=String(e);throw new Error("Objects are not valid as a React child (found: "+("[object Object]"===E?"object with keys {"+Object.keys(e).join(", ")+"}":E)+"). If you meant to render a collection of children, use an array instead.")}}return b}function de(e,t,r){if(null==e)return e;var n=[],o=0;return pe(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function ye(e){if(-1===e._status){var t=(0,e._result)();if(t.then((function(t){if(0===e._status||-1===e._status){var r=e;r._status=1,r._result=t}}),(function(t){if(0===e._status||-1===e._status){var r=e;r._status=2,r._result=t}})),-1===e._status){var r=e;r._status=0,r._result=t}}if(1===e._status){var n=e._result;return void 0===n&&E("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",n),"default"in n||E("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",n),n.default}throw e._result}function me(e){return"string"==typeof e||"function"==typeof e||e===a||e===i||e===u||e===f||e===p||e===m||"object"===r(e)&&null!==e&&(e.$$typeof===y||e.$$typeof===d||e.$$typeof===c||e.$$typeof===s||e.$$typeof===l||e.$$typeof===ie||void 0!==e.getModuleId)}function he(){var e=b.current;return null===e&&E("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."),e}ie=Symbol.for("react.module.reference");var ve,be,ge,_e,we,Se,ke,Ce=0;function Re(){}Re.__reactDisabledLog=!0;var Oe,Ee=R.ReactCurrentDispatcher;function je(e,t,r){if(void 0===Oe)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);Oe=n&&n[1]||""}return"\n"+Oe+e}var Pe,$e=!1,Te="function"==typeof WeakMap?WeakMap:Map;function xe(e,t){if(!e||$e)return"";var n,o=Pe.get(e);if(void 0!==o)return o;$e=!0;var a,u=Error.prepareStackTrace;Error.prepareStackTrace=void 0,a=Ee.current,Ee.current=null,function(){if(0===Ce){ve=console.log,be=console.info,ge=console.warn,_e=console.error,we=console.group,Se=console.groupCollapsed,ke=console.groupEnd;var e={configurable:!0,enumerable:!0,value:Re,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Ce++}();try{if(t){var i=function(){throw Error()};if(Object.defineProperty(i.prototype,"props",{set:function(){throw Error()}}),"object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&Reflect.construct){try{Reflect.construct(i,[])}catch(e){n=e}Reflect.construct(e,[],i)}else{try{i.call()}catch(e){n=e}e.call(i.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var c=t.stack.split("\n"),s=n.stack.split("\n"),l=c.length-1,f=s.length-1;l>=1&&f>=0&&c[l]!==s[f];)f--;for(;l>=1&&f>=0;l--,f--)if(c[l]!==s[f]){if(1!==l||1!==f)do{if(l--,--f<0||c[l]!==s[f]){var p="\n"+c[l].replace(" at new "," at ");return e.displayName&&p.includes("<anonymous>")&&(p=p.replace("<anonymous>",e.displayName)),"function"==typeof e&&Pe.set(e,p),p}}while(l>=1&&f>=0);break}}}finally{$e=!1,Ee.current=a,function(){if(0==--Ce){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:x({},e,{value:ve}),info:x({},e,{value:be}),warn:x({},e,{value:ge}),error:x({},e,{value:_e}),group:x({},e,{value:we}),groupCollapsed:x({},e,{value:Se}),groupEnd:x({},e,{value:ke})})}Ce<0&&E("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=u}var d=e?e.displayName||e.name:"",y=d?je(d):"";return"function"==typeof e&&Pe.set(e,y),y}function De(e,t,n){if(null==e)return"";if("function"==typeof e)return xe(e,function(e){var t=e.prototype;return!(!t||!t.isReactComponent)}(e));if("string"==typeof e)return je(e);switch(e){case f:return je("Suspense");case p:return je("SuspenseList")}if("object"===r(e))switch(e.$$typeof){case l:return xe(e.render,!1);case d:return De(e.type,t,n);case y:var o=e,a=o._payload,u=o._init;try{return De(u(a),t,n)}catch(e){}}return""}Pe=new Te;var Ie,Le={},Ne=R.ReactDebugCurrentFrame;function Ae(e){if(e){var t=e._owner,r=De(e.type,e._source,t?t.type:null);Ne.setExtraStackFrame(r)}else Ne.setExtraStackFrame(null)}function Fe(e){if(e){var t=e._owner;C(De(e.type,e._source,t?t.type:null))}else C(null)}function Me(){if(w.current){var e=H(w.current.type);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}function Ve(e){return null!=e&&void 0!==(t=e.__source)?"\n\nCheck your code at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+".":"";var t}Ie=!1;var Ue={};function ze(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=function(e){var t=Me();if(!t){var r="string"==typeof e?e:e.displayName||e.name;r&&(t="\n\nCheck the top-level render call using <"+r+">.")}return t}(t);if(!Ue[r]){Ue[r]=!0;var n="";e&&e._owner&&e._owner!==w.current&&(n=" It was passed a child from "+H(e._owner.type)+"."),Fe(e),E('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',r,n),Fe(null)}}}function qe(e,t){if("object"===r(e))if(z(e))for(var n=0;n<e.length;n++){var o=e[n];ue(o)&&ze(o,t)}else if(ue(e))e._store&&(e._store.validated=!0);else if(e){var a=v(e);if("function"==typeof a&&a!==e.entries)for(var u,i=a.call(e);!(u=i.next()).done;)ue(u.value)&&ze(u.value,t)}}function Be(e){var t,n=e.type;if(null!=n&&"string"!=typeof n){if("function"==typeof n)t=n.propTypes;else{if("object"!==r(n)||n.$$typeof!==l&&n.$$typeof!==d)return;t=n.propTypes}if(t){var o=H(n);!function(e,t,n,o,a){var u=Function.call.bind(J);for(var i in e)if(u(e,i)){var c=void 0;try{if("function"!=typeof e[i]){var s=Error((o||"React class")+": "+n+" type `"+i+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+r(e[i])+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw s.name="Invariant Violation",s}c=e[i](t,i,o,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){c=e}!c||c instanceof Error||(Ae(a),E("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",o||"React class",n,i,r(c)),Ae(null)),c instanceof Error&&!(c.message in Le)&&(Le[c.message]=!0,Ae(a),E("Failed %s type: %s",n,c.message),Ae(null))}}(t,e.props,"prop",o,e)}else void 0===n.PropTypes||Ie||(Ie=!0,E("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",H(n)||"Unknown"));"function"!=typeof n.getDefaultProps||n.getDefaultProps.isReactClassApproved||E("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Ye(e){for(var t=Object.keys(e.props),r=0;r<t.length;r++){var n=t[r];if("children"!==n&&"key"!==n){Fe(e),E("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",n),Fe(null);break}}null!==e.ref&&(Fe(e),E("Invalid attribute `ref` supplied to `React.Fragment`."),Fe(null))}function He(e,t,o){var u=me(e);if(!u){var i="";(void 0===e||"object"===r(e)&&null!==e&&0===Object.keys(e).length)&&(i+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var c,s=Ve(t);i+=s||Me(),null===e?c="null":z(e)?c="array":void 0!==e&&e.$$typeof===n?(c="<"+(H(e.type)||"Unknown")+" />",i=" Did you accidentally export a JSX literal instead of a component?"):c=r(e),E("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",c,i)}var l=oe.apply(this,arguments);if(null==l)return l;if(u)for(var f=2;f<arguments.length;f++)qe(arguments[f],e);return e===a?Ye(l):Be(l),l}var We=!1,Ge=!1,Ke=null,Je=0,Xe=!1;function Qe(e){e!==Je-1&&E("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),Je=e}function Ze(t,r,n){var o=_.current;if(null!==o)try{tt(o),function(t){if(null===Ke)try{var r=("require"+Math.random()).slice(0,7),n=e&&e[r];Ke=n.call(e,"timers").setImmediate}catch(e){Ke=function(e){!1===Ge&&(Ge=!0,"undefined"==typeof MessageChannel&&E("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}Ke(t)}((function(){0===o.length?(_.current=null,r(t)):Ze(t,r,n)}))}catch(e){n(e)}else r(t)}var et=!1;function tt(e){if(!et){et=!0;var t=0;try{for(;t<e.length;t++){var r=e[t];do{r=r(!0)}while(null!==r)}e.length=0}catch(r){throw e=e.slice(t+1),r}finally{et=!1}}}var rt=He,nt=function(e,t,r){for(var n=ae.apply(this,arguments),o=2;o<arguments.length;o++)qe(arguments[o],n.type);return Be(n),n},ot=function(e){var t=He.bind(null,e);return t.type=e,We||(We=!0,O("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(t,"type",{enumerable:!1,get:function(){return O("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},at={map:de,forEach:function(e,t,r){de(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return de(e,(function(){t++})),t},toArray:function(e){return de(e,(function(e){return e}))||[]},only:function(e){if(!ue(e))throw new Error("React.Children.only expected to receive a single React element child.");return e}};t.Children=at,t.Component=I,t.Fragment=a,t.Profiler=i,t.PureComponent=M,t.StrictMode=u,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=nt,t.createContext=function(e){var t={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};t.Provider={$$typeof:c,_context:t};var r=!1,n=!1,o=!1,a={$$typeof:s,_context:t};return Object.defineProperties(a,{Provider:{get:function(){return n||(n=!0,E("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),t.Provider},set:function(e){t.Provider=e}},_currentValue:{get:function(){return t._currentValue},set:function(e){t._currentValue=e}},_currentValue2:{get:function(){return t._currentValue2},set:function(e){t._currentValue2=e}},_threadCount:{get:function(){return t._threadCount},set:function(e){t._threadCount=e}},Consumer:{get:function(){return r||(r=!0,E("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),t.Consumer}},displayName:{get:function(){return t.displayName},set:function(e){o||(O("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",e),o=!0)}}}),t.Consumer=a,t._currentRenderer=null,t._currentRenderer2=null,t},t.createElement=rt,t.createFactory=ot,t.createRef=function(){var e={current:null};return Object.seal(e),e},t.forwardRef=function(e){null!=e&&e.$$typeof===d?E("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?E("forwardRef requires a render function but was given %s.",null===e?"null":r(e)):0!==e.length&&2!==e.length&&E("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&(null==e.defaultProps&&null==e.propTypes||E("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?"));var t,n={$$typeof:l,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(r){t=r,e.name||e.displayName||(e.displayName=r)}}),n},t.isValidElement=ue,t.lazy=function(e){var t,r,n={$$typeof:y,_payload:{_status:-1,_result:e},_init:ye};return Object.defineProperties(n,{defaultProps:{configurable:!0,get:function(){return t},set:function(e){E("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),t=e,Object.defineProperty(n,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return r},set:function(e){E("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),r=e,Object.defineProperty(n,"propTypes",{enumerable:!0})}}}),n},t.memo=function(e,t){me(e)||E("memo: The first argument must be a component. Instead received: %s",null===e?"null":r(e));var n,o={$$typeof:d,type:e,compare:void 0===t?null:t};return Object.defineProperty(o,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,e.name||e.displayName||(e.displayName=t)}}),o},t.startTransition=function(e,t){var r=g.transition;g.transition={};var n=g.transition;g.transition._updatedFibers=new Set;try{e()}finally{g.transition=r,null===r&&n._updatedFibers&&(n._updatedFibers.size>10&&O("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."),n._updatedFibers.clear())}},t.unstable_act=function(e){var t=Je;Je++,null===_.current&&(_.current=[]);var n,o=_.isBatchingLegacy;try{if(_.isBatchingLegacy=!0,n=e(),!o&&_.didScheduleLegacyUpdate){var a=_.current;null!==a&&(_.didScheduleLegacyUpdate=!1,tt(a))}}catch(e){throw Qe(t),e}finally{_.isBatchingLegacy=o}if(null!==n&&"object"===r(n)&&"function"==typeof n.then){var u=n,i=!1,c={then:function(e,r){i=!0,u.then((function(n){Qe(t),0===Je?Ze(n,e,r):e(n)}),(function(e){Qe(t),r(e)}))}};return Xe||"undefined"==typeof Promise||Promise.resolve().then((function(){})).then((function(){i||(Xe=!0,E("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))})),c}var s=n;if(Qe(t),0===Je){var l=_.current;return null!==l&&(tt(l),_.current=null),{then:function(e,t){null===_.current?(_.current=[],Ze(s,e,t)):e(s)}}}return{then:function(e,t){e(s)}}},t.useCallback=function(e,t){return he().useCallback(e,t)},t.useContext=function(e){var t=he();if(void 0!==e._context){var r=e._context;r.Consumer===e?E("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):r.Provider===e&&E("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return t.useContext(e)},t.useDebugValue=function(e,t){return he().useDebugValue(e,t)},t.useDeferredValue=function(e){return he().useDeferredValue(e)},t.useEffect=function(e,t){return he().useEffect(e,t)},t.useId=function(){return he().useId()},t.useImperativeHandle=function(e,t,r){return he().useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return he().useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return he().useLayoutEffect(e,t)},t.useMemo=function(e,t){return he().useMemo(e,t)},t.useReducer=function(e,t,r){return he().useReducer(e,t,r)},t.useRef=function(e){return he().useRef(e)},t.useState=function(e){return he().useState(e)},t.useSyncExternalStore=function(e,t,r){return he().useSyncExternalStore(e,t,r)},t.useTransition=function(){return he().useTransition()},t.version="18.2.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)}()),c;var e,t}i={get exports(){return t},set exports(e){t=e}},"production"===process.env.NODE_ENV?i.exports=a():i.exports=l();var f=e(t);return{TestComponent:function(){return f.createElement("div",{style:{height:300,width:300,backgroundColor:"red"}},"TESTE")}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
